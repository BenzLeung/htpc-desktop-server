import { app, BrowserWindow, Tray } from 'electron'
import { isMac, isWin } from './utils/utils'
import trayIconWhite from './assets/img/tray-w.png'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

let mainWindow: null | BrowserWindow
// 托盘对象
let appTray: null | Tray = null

/**
 * 创建程序锁，保证只能打开单个实例
 * @function appOpenInit
 */
const appOpenInit = () => {
  if (isWin()) {
    const gotTheLock = app.requestSingleInstanceLock()
    if (!gotTheLock) {
      app.quit()
    } else {
      app.on('second-instance', (/*event, commandLine, workingDirectory*/) => {
        if (mainWindow) {
          if (!mainWindow.isVisible()) {
            mainWindowShow()
          }
          mainWindow.focus()
        }
      })
    }
  } else if (isMac()) {
    app.dock.hide()
  }


  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  // Some APIs can only be used after this event occurs.
  app.on('ready', createWindow)

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      app.quit()
      mainWindow = null
    }
  })

  app.on('activate', () => {
    if (mainWindow === null) {
      appInit()
    } else {
      mainWindowShow()
    }
  })

}

const appInit = () => {
  if (mainWindow == null) {
    createWindow() // 创建主窗口
  } else {
    mainWindowShow()
  }
  if (appTray == null) {
    createAppTray() // 创建系统托盘
  }
}

const mainWindowShow = () => {
  mainWindow.show()
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    fullscreenable: true,
    fullscreen: false,
    skipTaskbar: true,
    alwaysOnTop: false,
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  // mainWindow.webContents.openDevTools()
}

const createAppTray = () => {
  appTray = new Tray(trayIconWhite)

  appTray.on('click', () => {
    if (mainWindow) {
      if (!mainWindow.isVisible()) {
        mainWindowShow()
      }
      mainWindow.focus()
    }
  })
}

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

appOpenInit()